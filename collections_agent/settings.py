"""
Django settings for collections_agent project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-8i35qs^giq24k6!93gvbs!c2+l%nr$b7oi(5lma=+1cenk@rj6')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Allow all hosts for development (including ngrok)
ALLOWED_HOSTS = ['*']

# Base URL for the application
BASE_URL = config('BASE_URL', default='https://collection-agent-7fb01e4a92ee.herokuapp.com')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'corsheaders',
    'drf_spectacular',
    'django_extensions',
    
    # Local apps
    'invoice_collections',
    'payment_processing',
    'webhook_handlers',
    'integration',
    
    # A2A Broker and AP2 Payment Agent apps
    'a2a_broker',
    'payment_agent',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_ratelimit.middleware.RatelimitMiddleware',
]

ROOT_URLCONF = 'collections_agent.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'collections_agent.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('DB_NAME', default='collections_agent'),
#         'USER': config('DB_USER', default='postgres'),
#         'PASSWORD': config('DB_PASSWORD', default='postgres'),
#         'HOST': config('DB_HOST', default='localhost'),
#         'PORT': config('DB_PORT', default='5432'),
#     }
# }

# Database configuration for Heroku
import dj_database_url

DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL', default='postgresql://postgres:1234@localhost:5432/collection-agent')
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'invoice_collections.authentication.APIKeyAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# API Documentation
SPECTACULAR_SETTINGS = {
    'TITLE': 'Collections & Payments Agent API',
    'DESCRIPTION': 'Production-ready Django REST API for processing invoice collections through automated payments',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

# Celery Configuration (Removed for simplicity)
# CELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379/0')
# CELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379/0')
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE
# CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')

# Google Cloud Configuration
GOOGLE_CLOUD_PROJECT = config('GOOGLE_CLOUD_PROJECT', default='collections-agent-project-id')
GOOGLE_APPLICATION_CREDENTIALS = config('GOOGLE_APPLICATION_CREDENTIALS', default='')
PUBSUB_TOPIC_COLLECTIONS = config('PUBSUB_TOPIC_COLLECTIONS', default='collections-agent-requests')
PUBSUB_TOPIC_PAYMENTS = config('PUBSUB_TOPIC_PAYMENTS', default='payment-agent-responses')

# API Key Authentication
API_KEY_HEADER = 'X-API-Key'
SALESFORCE_API_KEY = config('SALESFORCE_API_KEY', default='test-api-key')

# Salesforce Integration Configuration
SALESFORCE_WEBHOOK_URL = config('SALESFORCE_WEBHOOK_URL', default='https://orgfarm-9b9073bfe6-dev-ed.develop.my.salesforce.com/services/apexrest/InvoiceStatusUpdate/')
SALESFORCE_CLIENT_ID = config('SALESFORCE_CLIENT_ID', default='3MVG9XgkMlifdwVClU3Lyx2otlBfqum9DpxKbJSAeiQIOHgDVALJRZhL9LZJehJcZurD9waKwFbdN08n_RQZF')
SALESFORCE_CLIENT_SECRET = config('SALESFORCE_CLIENT_SECRET', default='1B550AD62CCBF77A4A679AA0F4F8D60970A476D0425544F08A657EF50F3FFD54')
SALESFORCE_USERNAME = config('SALESFORCE_USERNAME', default='epic.ddc23e8eedd8@orgfarm.salesforce.com')
SALESFORCE_PASSWORD = config('SALESFORCE_PASSWORD', default='orgfarm1234')
SALESFORCE_SECURITY_TOKEN = config('SALESFORCE_SECURITY_TOKEN', default='your-security-token-here')
SALESFORCE_INSTANCE_URL = config('SALESFORCE_INSTANCE_URL', default='https://orgfarm-9b9073bfe6-dev-ed.develop.my.salesforce.com')

# Note: Slack integration is handled by Salesforce team via Agentforce

# A2A Broker Configuration
A2A_BROKER_ENDPOINT = config('A2A_BROKER_ENDPOINT', default='http://localhost:8000/api/v1/a2a/')
A2A_SIGNING_SECRET = config('A2A_SIGNING_SECRET', default='your-a2a-signing-secret')

# AP2 Payment Agent Configuration
AP2_ENDPOINT = config('AP2_ENDPOINT', default='http://localhost:8000/api/v1/ap2/')
AP2_SIGNING_SECRET = config('AP2_SIGNING_SECRET', default='your-ap2-signing-secret')

# Rate Limiting
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_ENABLE = True

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'collections_agent': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Security Settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Session settings
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 3600  # 1 hour

# CSRF settings
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)